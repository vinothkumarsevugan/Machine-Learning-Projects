{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Model_Results_Project_Chennai House",
      "provenance": [],
      "authorship_tag": "ABX9TyPuL1ig5hWIzJKPmKAGvlpJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vinothkumarsevugan/Machine-Learning-Projects/blob/main/Machine%20Learning%20for%20House%20Price%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploratory Data Analysis is done in this colab link\n"
      ],
      "metadata": {
        "id": "l0kn5ctn9MNB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "https://colab.research.google.com/drive/1C3rFGn3uHQizLNePSBLZiLFoUVNb3zsk?usp=sharing"
      ],
      "metadata": {
        "id": "Nh2Byj9F9K9S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "19O2v5bYqV8o"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/cleaneddata\")"
      ],
      "metadata": {
        "id": "CJElT1b8qcg3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "9W0BLqQ-qhXI",
        "outputId": "51686335-3e5c-474a-b31f-a193c43fbe38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         AREA  INT_SQFT   DATE_SALE  DIST_MAINROAD  N_BEDROOM  N_BATHROOM  \\\n",
              "0  Karapakkam      1004  2011-05-04            131          1           1   \n",
              "1  Anna Nagar      1986  2006-12-19             26          2           1   \n",
              "2       Adyar       909  2012-02-04             70          1           1   \n",
              "3   Velachery      1855  2010-03-13             14          3           2   \n",
              "4  Karapakkam      1226  2009-10-05             84          1           1   \n",
              "\n",
              "   N_ROOM SALE_COND  PARK_FACIL  DATE_BUILD   BUILDTYPE UTILITY_AVAIL  STREET  \\\n",
              "0       3  AbNormal           1  1967-05-15  Commercial       All Pub   Paved   \n",
              "1       5  AbNormal           0  1995-12-22  Commercial       All Pub  Gravel   \n",
              "2       3  AbNormal           1  1992-02-09  Commercial           ELO  Gravel   \n",
              "3       5    Family           0  1988-03-18      Others       NoSewr    Paved   \n",
              "4       3  AbNormal           1  1979-10-13      Others       All Pub  Gravel   \n",
              "\n",
              "  MZZONE  REG_FEE  COMMIS  SALES_PRICE  \n",
              "0      A   380000  144400      7600000  \n",
              "1     RH   760122  304049     21717770  \n",
              "2     RL   421094   92114     13159200  \n",
              "3      I   356321   77042      9630290  \n",
              "4      C   237000   74063      7406250  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7693e920-3612-4468-abf6-b15b92ebda2d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>DATE_SALE</th>\n",
              "      <th>DIST_MAINROAD</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>SALE_COND</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>DATE_BUILD</th>\n",
              "      <th>BUILDTYPE</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>REG_FEE</th>\n",
              "      <th>COMMIS</th>\n",
              "      <th>SALES_PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Karapakkam</td>\n",
              "      <td>1004</td>\n",
              "      <td>2011-05-04</td>\n",
              "      <td>131</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>1967-05-15</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>All Pub</td>\n",
              "      <td>Paved</td>\n",
              "      <td>A</td>\n",
              "      <td>380000</td>\n",
              "      <td>144400</td>\n",
              "      <td>7600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Anna Nagar</td>\n",
              "      <td>1986</td>\n",
              "      <td>2006-12-19</td>\n",
              "      <td>26</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>0</td>\n",
              "      <td>1995-12-22</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>All Pub</td>\n",
              "      <td>Gravel</td>\n",
              "      <td>RH</td>\n",
              "      <td>760122</td>\n",
              "      <td>304049</td>\n",
              "      <td>21717770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adyar</td>\n",
              "      <td>909</td>\n",
              "      <td>2012-02-04</td>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>1992-02-09</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>ELO</td>\n",
              "      <td>Gravel</td>\n",
              "      <td>RL</td>\n",
              "      <td>421094</td>\n",
              "      <td>92114</td>\n",
              "      <td>13159200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Velachery</td>\n",
              "      <td>1855</td>\n",
              "      <td>2010-03-13</td>\n",
              "      <td>14</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>Family</td>\n",
              "      <td>0</td>\n",
              "      <td>1988-03-18</td>\n",
              "      <td>Others</td>\n",
              "      <td>NoSewr</td>\n",
              "      <td>Paved</td>\n",
              "      <td>I</td>\n",
              "      <td>356321</td>\n",
              "      <td>77042</td>\n",
              "      <td>9630290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Karapakkam</td>\n",
              "      <td>1226</td>\n",
              "      <td>2009-10-05</td>\n",
              "      <td>84</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>1979-10-13</td>\n",
              "      <td>Others</td>\n",
              "      <td>All Pub</td>\n",
              "      <td>Gravel</td>\n",
              "      <td>C</td>\n",
              "      <td>237000</td>\n",
              "      <td>74063</td>\n",
              "      <td>7406250</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7693e920-3612-4468-abf6-b15b92ebda2d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7693e920-3612-4468-abf6-b15b92ebda2d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7693e920-3612-4468-abf6-b15b92ebda2d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from sklearn import preprocessing\n",
        "#label_encoder = preprocessing.LabelEncoder()\n",
        "#df['AREA']= label_encoder.fit_transform(df['AREA'])\n",
        "#df['AREA'].unique()\n",
        "#not using label encoder for ordinal data with linear tend between column and sales price we will label them based on rank with least being 1 and max being successively higher number\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67glBV3oqiHc",
        "outputId": "f4ed8d2f-0855-4449-d7c6-3ea8e46a44ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 1, 0, 7, 3, 4, 6, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6sOWMvEfqn_G",
        "outputId": "4aaec617-ef3d-47b0-b5f3-8bbce71f00c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['AREA', 'INT_SQFT', 'DATE_SALE', 'N_BEDROOM', 'N_BATHROOM', 'N_ROOM',\n",
              "       'SALE_COND', 'PARK_FACIL', 'BUILDTYPE', 'UTILITY_AVAIL', 'STREET',\n",
              "       'MZZONE', 'SALES_PRICE'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('REG_FEE',axis=1)  # registration fee happens after a sale happens hence it wont affect sales price"
      ],
      "metadata": {
        "id": "Pa-PwsCU0M2p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('COMMIS',axis=1)  #commission depends on property sold and it will not affect sales price"
      ],
      "metadata": {
        "id": "fgoezghT0gK4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('DATE_BUILD',axis=1)  #according the age graph build age doesnt affect much of sales price"
      ],
      "metadata": {
        "id": "r6-z_Sbc0sRa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('DIST_MAINROAD',axis=1) #according to plot distance from main road doesnot affect sales price\n"
      ],
      "metadata": {
        "id": "kw-J1o-J02Dh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop('DATE_SALE',axis=1)"
      ],
      "metadata": {
        "id": "WHVbTMgS3DCa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"AREA\"]=df.AREA.map({\n",
        "    'Karapakkam': 0,\n",
        "    'Adyar': 1,\n",
        "    'Chrompet':2,\n",
        "    'Velachery':3,\n",
        "    'KK Nagar':4,\n",
        "    'Anna Nagar':5,\n",
        "    'T Nagar':6})\n",
        "\n",
        "#mapping based on least to highest"
      ],
      "metadata": {
        "id": "YvRVNq2sqpX-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"UTILITY_AVAIL\"]=df.UTILITY_AVAIL.map({\n",
        "    'ELO': 0,\n",
        "    'NoSeWa': 1,\n",
        "    'NoSewr':2,\n",
        "    'All Pub':3,\n",
        "    })\n",
        "\n",
        "#mapping based on least to highest"
      ],
      "metadata": {
        "id": "VrXcIxw03vAL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XEPNiU4z5CTm",
        "outputId": "50239f97-1c8c-447f-d12a-0fbc3b776ae4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AREA               int64\n",
              "INT_SQFT           int64\n",
              "N_BEDROOM          int64\n",
              "N_BATHROOM         int64\n",
              "N_ROOM             int64\n",
              "SALE_COND         object\n",
              "PARK_FACIL         int64\n",
              "BUILDTYPE         object\n",
              "UTILITY_AVAIL    float64\n",
              "STREET             int64\n",
              "MZZONE            object\n",
              "SALES_PRICE        int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "gPPhDDo94aA4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['UTILITY_AVAIL'] = df['UTILITY_AVAIL'].replace(np.nan, 2)"
      ],
      "metadata": {
        "id": "fcUqvrjU4WyG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"STREET\"]=df.STREET.map({\n",
        "    'No Access': 0,\n",
        "    'Paved': 1,\n",
        "    'Gravel':2,\n",
        "    })\n",
        "\n",
        "#mapping based on least to highest"
      ],
      "metadata": {
        "id": "PH8hVM2h4puw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"MZZONE\"]=df.MZZONE.map({\n",
        "    'A': 0,\n",
        "    'C': 1,\n",
        "    'I':2,\n",
        "    'RH':3,\n",
        "    'RL':4,\n",
        "    'RM':5,\n",
        "    })\n",
        "\n",
        "#mapping based on least to highest"
      ],
      "metadata": {
        "id": "hsjuZJe15Msz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "id": "bUafjxbb58ph"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"UTILITY_AVAIL\"]=df[\"UTILITY_AVAIL\"].astype(int)"
      ],
      "metadata": {
        "id": "tBLHtl435_ZL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fsqWTh_crZEZ",
        "outputId": "69a5fc5e-2317-4b17-c483-ccf0c4313b30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AREA  INT_SQFT  N_BEDROOM  N_BATHROOM  N_ROOM SALE_COND  PARK_FACIL  \\\n",
              "0     0      1004          1           1       3  AbNormal           1   \n",
              "1     5      1986          2           1       5  AbNormal           0   \n",
              "2     1       909          1           1       3  AbNormal           1   \n",
              "3     3      1855          3           2       5    Family           0   \n",
              "4     0      1226          1           1       3  AbNormal           1   \n",
              "\n",
              "    BUILDTYPE  UTILITY_AVAIL  STREET  MZZONE  SALES_PRICE  \n",
              "0  Commercial            3.0       1       0      7600000  \n",
              "1  Commercial            3.0       2       3     21717770  \n",
              "2  Commercial            0.0       2       4     13159200  \n",
              "3      Others            2.0       1       2      9630290  \n",
              "4      Others            3.0       2       1      7406250  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-885fd4f1-f0a5-40dd-a3e1-683bd6628d4f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>SALE_COND</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>BUILDTYPE</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>SALES_PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1004</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>0</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>21717770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>909</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>Commercial</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>13159200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1855</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>Family</td>\n",
              "      <td>0</td>\n",
              "      <td>Others</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9630290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1226</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>AbNormal</td>\n",
              "      <td>1</td>\n",
              "      <td>Others</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7406250</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-885fd4f1-f0a5-40dd-a3e1-683bd6628d4f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-885fd4f1-f0a5-40dd-a3e1-683bd6628d4f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-885fd4f1-f0a5-40dd-a3e1-683bd6628d4f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "one_hot_encoded_data = pd.get_dummies(df, columns = ['SALE_COND','BUILDTYPE'])\n",
        "one_hot_encoded_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "uJ_pp8DnrZ1H",
        "outputId": "33393f11-5946-4a5e-8739-2e87f8380c19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      AREA  INT_SQFT  N_BEDROOM  N_BATHROOM  N_ROOM  PARK_FACIL  \\\n",
              "0        0      1004          1           1       3           1   \n",
              "1        5      1986          2           1       5           0   \n",
              "2        1       909          1           1       3           1   \n",
              "3        3      1855          3           2       5           0   \n",
              "4        0      1226          1           1       3           1   \n",
              "...    ...       ...        ...         ...     ...         ...   \n",
              "7051     0       598          1           1       2           0   \n",
              "7052     3      1897          3           2       5           1   \n",
              "7053     3      1614          2           1       4           0   \n",
              "7054     0       787          1           1       2           1   \n",
              "7055     3      1896          3           2       5           1   \n",
              "\n",
              "      UTILITY_AVAIL  STREET  MZZONE  SALES_PRICE  SALE_COND_AbNormal  \\\n",
              "0                 3       1       0      7600000                   1   \n",
              "1                 3       2       3     21717770                   1   \n",
              "2                 0       2       4     13159200                   1   \n",
              "3                 2       1       2      9630290                   0   \n",
              "4                 3       2       1      7406250                   1   \n",
              "...             ...     ...     ...          ...                 ...   \n",
              "7051              0       0       5      5353000                   0   \n",
              "7052              1       0       3     10818480                   0   \n",
              "7053              1       2       2      8351410                   0   \n",
              "7054              0       1       4      8507000                   0   \n",
              "7055              0       1       2      9976480                   0   \n",
              "\n",
              "      SALE_COND_AdjLand  SALE_COND_Family  SALE_COND_Normal Sale  \\\n",
              "0                     0                 0                      0   \n",
              "1                     0                 0                      0   \n",
              "2                     0                 0                      0   \n",
              "3                     0                 1                      0   \n",
              "4                     0                 0                      0   \n",
              "...                 ...               ...                    ...   \n",
              "7051                  1                 0                      0   \n",
              "7052                  0                 1                      0   \n",
              "7053                  0                 0                      1   \n",
              "7054                  0                 0                      0   \n",
              "7055                  0                 0                      0   \n",
              "\n",
              "      SALE_COND_Partial  BUILDTYPE_Commercial  BUILDTYPE_House  \\\n",
              "0                     0                     1                0   \n",
              "1                     0                     1                0   \n",
              "2                     0                     1                0   \n",
              "3                     0                     0                0   \n",
              "4                     0                     0                0   \n",
              "...                 ...                   ...              ...   \n",
              "7051                  0                     0                0   \n",
              "7052                  0                     0                0   \n",
              "7053                  0                     0                1   \n",
              "7054                  1                     1                0   \n",
              "7055                  1                     0                0   \n",
              "\n",
              "      BUILDTYPE_Others  \n",
              "0                    0  \n",
              "1                    0  \n",
              "2                    0  \n",
              "3                    1  \n",
              "4                    1  \n",
              "...                ...  \n",
              "7051                 1  \n",
              "7052                 1  \n",
              "7053                 0  \n",
              "7054                 0  \n",
              "7055                 1  \n",
              "\n",
              "[7056 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eeafb9c7-6fa9-4803-ace8-39ad762cfadd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>SALES_PRICE</th>\n",
              "      <th>SALE_COND_AbNormal</th>\n",
              "      <th>SALE_COND_AdjLand</th>\n",
              "      <th>SALE_COND_Family</th>\n",
              "      <th>SALE_COND_Normal Sale</th>\n",
              "      <th>SALE_COND_Partial</th>\n",
              "      <th>BUILDTYPE_Commercial</th>\n",
              "      <th>BUILDTYPE_House</th>\n",
              "      <th>BUILDTYPE_Others</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1004</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7600000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>21717770</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>909</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>13159200</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1855</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9630290</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1226</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7406250</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7051</th>\n",
              "      <td>0</td>\n",
              "      <td>598</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5353000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7052</th>\n",
              "      <td>3</td>\n",
              "      <td>1897</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>10818480</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7053</th>\n",
              "      <td>3</td>\n",
              "      <td>1614</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>8351410</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7054</th>\n",
              "      <td>0</td>\n",
              "      <td>787</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>8507000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7055</th>\n",
              "      <td>3</td>\n",
              "      <td>1896</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9976480</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7056 rows × 18 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eeafb9c7-6fa9-4803-ace8-39ad762cfadd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eeafb9c7-6fa9-4803-ace8-39ad762cfadd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eeafb9c7-6fa9-4803-ace8-39ad762cfadd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=one_hot_encoded_data.drop(labels=\"SALE_COND_AbNormal\",axis=1)"
      ],
      "metadata": {
        "id": "tRVRYgmGtgQT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "one=one_hot_encoded_data "
      ],
      "metadata": {
        "id": "SUrYT0bUtp2l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "one.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "-g2GWhe0tqgs",
        "outputId": "5addf7c2-151f-4ee7-e298-9b1290e5ec2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AREA  INT_SQFT  N_BEDROOM  N_BATHROOM  N_ROOM  PARK_FACIL  UTILITY_AVAIL  \\\n",
              "0     0      1004          1           1       3           1              3   \n",
              "1     5      1986          2           1       5           0              3   \n",
              "2     1       909          1           1       3           1              0   \n",
              "3     3      1855          3           2       5           0              2   \n",
              "4     0      1226          1           1       3           1              3   \n",
              "\n",
              "   STREET  MZZONE  SALES_PRICE  SALE_COND_AbNormal  SALE_COND_AdjLand  \\\n",
              "0       1       0      7600000                   1                  0   \n",
              "1       2       3     21717770                   1                  0   \n",
              "2       2       4     13159200                   1                  0   \n",
              "3       1       2      9630290                   0                  0   \n",
              "4       2       1      7406250                   1                  0   \n",
              "\n",
              "   SALE_COND_Family  SALE_COND_Normal Sale  SALE_COND_Partial  \\\n",
              "0                 0                      0                  0   \n",
              "1                 0                      0                  0   \n",
              "2                 0                      0                  0   \n",
              "3                 1                      0                  0   \n",
              "4                 0                      0                  0   \n",
              "\n",
              "   BUILDTYPE_Commercial  BUILDTYPE_House  BUILDTYPE_Others  \n",
              "0                     1                0                 0  \n",
              "1                     1                0                 0  \n",
              "2                     1                0                 0  \n",
              "3                     0                0                 1  \n",
              "4                     0                0                 1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-667d6801-901a-407a-96ff-1a111d6e0938\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>SALES_PRICE</th>\n",
              "      <th>SALE_COND_AbNormal</th>\n",
              "      <th>SALE_COND_AdjLand</th>\n",
              "      <th>SALE_COND_Family</th>\n",
              "      <th>SALE_COND_Normal Sale</th>\n",
              "      <th>SALE_COND_Partial</th>\n",
              "      <th>BUILDTYPE_Commercial</th>\n",
              "      <th>BUILDTYPE_House</th>\n",
              "      <th>BUILDTYPE_Others</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1004</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7600000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>21717770</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>909</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>13159200</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1855</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9630290</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1226</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7406250</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-667d6801-901a-407a-96ff-1a111d6e0938')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-667d6801-901a-407a-96ff-1a111d6e0938 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-667d6801-901a-407a-96ff-1a111d6e0938');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=one.iloc[:,[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17]]"
      ],
      "metadata": {
        "id": "k_o4Ar9Rt6Q2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "pfUhE3mguavh",
        "outputId": "1392beda-2040-4acc-d8c9-1094f2423683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      AREA  INT_SQFT  N_BEDROOM  N_BATHROOM  N_ROOM  PARK_FACIL  \\\n",
              "0        0      1004          1           1       3           1   \n",
              "1        5      1986          2           1       5           0   \n",
              "2        1       909          1           1       3           1   \n",
              "3        3      1855          3           2       5           0   \n",
              "4        0      1226          1           1       3           1   \n",
              "...    ...       ...        ...         ...     ...         ...   \n",
              "7051     0       598          1           1       2           0   \n",
              "7052     3      1897          3           2       5           1   \n",
              "7053     3      1614          2           1       4           0   \n",
              "7054     0       787          1           1       2           1   \n",
              "7055     3      1896          3           2       5           1   \n",
              "\n",
              "      UTILITY_AVAIL  STREET  MZZONE  SALE_COND_AbNormal  SALE_COND_AdjLand  \\\n",
              "0                 3       1       0                   1                  0   \n",
              "1                 3       2       3                   1                  0   \n",
              "2                 0       2       4                   1                  0   \n",
              "3                 2       1       2                   0                  0   \n",
              "4                 3       2       1                   1                  0   \n",
              "...             ...     ...     ...                 ...                ...   \n",
              "7051              0       0       5                   0                  1   \n",
              "7052              1       0       3                   0                  0   \n",
              "7053              1       2       2                   0                  0   \n",
              "7054              0       1       4                   0                  0   \n",
              "7055              0       1       2                   0                  0   \n",
              "\n",
              "      SALE_COND_Family  SALE_COND_Normal Sale  SALE_COND_Partial  \\\n",
              "0                    0                      0                  0   \n",
              "1                    0                      0                  0   \n",
              "2                    0                      0                  0   \n",
              "3                    1                      0                  0   \n",
              "4                    0                      0                  0   \n",
              "...                ...                    ...                ...   \n",
              "7051                 0                      0                  0   \n",
              "7052                 1                      0                  0   \n",
              "7053                 0                      1                  0   \n",
              "7054                 0                      0                  1   \n",
              "7055                 0                      0                  1   \n",
              "\n",
              "      BUILDTYPE_Commercial  BUILDTYPE_House  BUILDTYPE_Others  \n",
              "0                        1                0                 0  \n",
              "1                        1                0                 0  \n",
              "2                        1                0                 0  \n",
              "3                        0                0                 1  \n",
              "4                        0                0                 1  \n",
              "...                    ...              ...               ...  \n",
              "7051                     0                0                 1  \n",
              "7052                     0                0                 1  \n",
              "7053                     0                1                 0  \n",
              "7054                     1                0                 0  \n",
              "7055                     0                0                 1  \n",
              "\n",
              "[7056 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33978e04-fb99-4bf6-af50-29ad0bef7ff7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>SALE_COND_AbNormal</th>\n",
              "      <th>SALE_COND_AdjLand</th>\n",
              "      <th>SALE_COND_Family</th>\n",
              "      <th>SALE_COND_Normal Sale</th>\n",
              "      <th>SALE_COND_Partial</th>\n",
              "      <th>BUILDTYPE_Commercial</th>\n",
              "      <th>BUILDTYPE_House</th>\n",
              "      <th>BUILDTYPE_Others</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1004</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>909</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1855</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1226</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7051</th>\n",
              "      <td>0</td>\n",
              "      <td>598</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7052</th>\n",
              "      <td>3</td>\n",
              "      <td>1897</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7053</th>\n",
              "      <td>3</td>\n",
              "      <td>1614</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7054</th>\n",
              "      <td>0</td>\n",
              "      <td>787</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7055</th>\n",
              "      <td>3</td>\n",
              "      <td>1896</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7056 rows × 17 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33978e04-fb99-4bf6-af50-29ad0bef7ff7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-33978e04-fb99-4bf6-af50-29ad0bef7ff7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-33978e04-fb99-4bf6-af50-29ad0bef7ff7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=one.iloc[:,[9]]"
      ],
      "metadata": {
        "id": "j0I3UGo6ujOA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "XvZTWPJv6pQB",
        "outputId": "763eb892-7290-43e5-c9e0-b5789c34a285"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      SALES_PRICE\n",
              "0         7600000\n",
              "1        21717770\n",
              "2        13159200\n",
              "3         9630290\n",
              "4         7406250\n",
              "...           ...\n",
              "7051      5353000\n",
              "7052     10818480\n",
              "7053      8351410\n",
              "7054      8507000\n",
              "7055      9976480\n",
              "\n",
              "[7056 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8fc77c7-68e3-43bf-b60c-0dab4ebdba2f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SALES_PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21717770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13159200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9630290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7406250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7051</th>\n",
              "      <td>5353000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7052</th>\n",
              "      <td>10818480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7053</th>\n",
              "      <td>8351410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7054</th>\n",
              "      <td>8507000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7055</th>\n",
              "      <td>9976480</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7056 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8fc77c7-68e3-43bf-b60c-0dab4ebdba2f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e8fc77c7-68e3-43bf-b60c-0dab4ebdba2f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e8fc77c7-68e3-43bf-b60c-0dab4ebdba2f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Linear Regression"
      ],
      "metadata": {
        "id": "1D233FdJc8Ka"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model"
      ],
      "metadata": {
        "id": "oAvhX8UzujsE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)"
      ],
      "metadata": {
        "id": "Cm0YZypGutmV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "regressor = LinearRegression()\n",
        "regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ruloO3c6u_WO",
        "outputId": "35e6783a-635b-4fd2-c33d-5a2082a59bbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=regressor.predict(X_test)"
      ],
      "metadata": {
        "id": "iSpNtSqzvS51"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics \n",
        "print('R2- SCORE:', metrics.r2_score(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dZHIC5i9v9Zd",
        "outputId": "0e444d31-8d6c-4158-adc5-83ac18d2f7cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R2- SCORE: 0.9182331628506659\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "when using linear regression the r2 value reached is 0.9182331628506659"
      ],
      "metadata": {
        "id": "S9bzmB6u_pUF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "one.to_csv(\"Cleaned_and_encoded_data.csv\")"
      ],
      "metadata": {
        "id": "3iVZZRGswHj9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Xgboost"
      ],
      "metadata": {
        "id": "O3ooeYG6dCwG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=X_train\n",
        "x_test=X_test"
      ],
      "metadata": {
        "id": "ni6ExiUOxBls"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "from sklearn.model_selection import cross_val_score\n",
        "import numpy as np\n",
        "for lr in [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.2,0.5,0.6,0.7,0.8,1]:\n",
        "  model = xgb.XGBRegressor(learning_rate = lr, n_estimators=100, verbosity = 0) # initialise the model\n",
        "  model.fit(x_train,y_train) #train the model\n",
        "  model.score(x_test, y_test) # scoring the model - r2 squared\n",
        "  print(\"Learning rate : \", lr, \" Train score : \", model.score(x_train,y_train), \" Cross-Val score : \", np.mean(cross_val_score(model, x_train, y_train, cv=10)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L7KhS-Ytw6cv",
        "outputId": "a26bd32b-96ee-4d2f-a71c-f775b81d3582"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Learning rate :  0.01  Train score :  -0.3683159127029123  Cross-Val score :  -0.37531089603534995\n",
            "Learning rate :  0.02  Train score :  0.7496213587151435  Cross-Val score :  0.7462523324016576\n",
            "Learning rate :  0.03  Train score :  0.9260789582961872  Cross-Val score :  0.9232351470417977\n",
            "Learning rate :  0.04  Train score :  0.9630838096559694  Cross-Val score :  0.9603934401565338\n",
            "Learning rate :  0.05  Train score :  0.974882355537138  Cross-Val score :  0.9723286326944491\n",
            "Learning rate :  0.06  Train score :  0.9805993888943234  Cross-Val score :  0.9779811613787904\n",
            "Learning rate :  0.07  Train score :  0.9834646793418435  Cross-Val score :  0.981933877620086\n",
            "Learning rate :  0.08  Train score :  0.9868003987613604  Cross-Val score :  0.9850152457358933\n",
            "Learning rate :  0.09  Train score :  0.9889297650582342  Cross-Val score :  0.9871987335791671\n",
            "Learning rate :  0.1  Train score :  0.9901703010562618  Cross-Val score :  0.9887622562742286\n",
            "Learning rate :  0.11  Train score :  0.9915410689213089  Cross-Val score :  0.9897946637819001\n",
            "Learning rate :  0.12  Train score :  0.9922031025432319  Cross-Val score :  0.990877940349233\n",
            "Learning rate :  0.13  Train score :  0.9924963982298037  Cross-Val score :  0.9912262587871293\n",
            "Learning rate :  0.14  Train score :  0.9933337369879074  Cross-Val score :  0.9916087068976658\n",
            "Learning rate :  0.15  Train score :  0.9932087179581929  Cross-Val score :  0.9917754683650873\n",
            "Learning rate :  0.2  Train score :  0.9943548152763411  Cross-Val score :  0.9928499057711093\n",
            "Learning rate :  0.5  Train score :  0.9955492541118874  Cross-Val score :  0.9934414676410214\n",
            "Learning rate :  0.6  Train score :  0.9951109158651368  Cross-Val score :  0.9931106322940109\n",
            "Learning rate :  0.7  Train score :  0.9957391742925683  Cross-Val score :  0.9937481722709578\n",
            "Learning rate :  0.8  Train score :  0.9956383659193111  Cross-Val score :  0.9935908965787469\n",
            "Learning rate :  1  Train score :  0.9951599159942585  Cross-Val score :  0.9924666882030525\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = xgb.XGBRegressor(learning_rate = 0.7, n_estimators=100)\n",
        "model.fit(x_train,y_train) #train the model\n",
        "model.score(x_test, y_test) # scoring the model - r2 squared"
      ],
      "metadata": {
        "id": "CmzEK9huxgKU",
        "outputId": "d7606d55-a996-423a-bb92-882f1eaa761b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[17:40:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9932693005064412"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot"
      ],
      "metadata": {
        "id": "mzn3qDib7y9W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "importance = model.feature_importances_\n",
        "pyplot.bar([x for x in range(len(importance))], importance)\n",
        "list(zip(importance,X_test.columns))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "id": "EjsmyI4ZcLe5",
        "outputId": "f10975ba-c038-4038-df20-e6347f1b6019"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(0.37018383, 'AREA'),\n",
              " (0.025515469, 'INT_SQFT'),\n",
              " (0.009786319, 'N_BEDROOM'),\n",
              " (0.00207577, 'N_BATHROOM'),\n",
              " (0.041361924, 'N_ROOM'),\n",
              " (0.0350876, 'PARK_FACIL'),\n",
              " (0.002132948, 'UTILITY_AVAIL'),\n",
              " (0.017419089, 'STREET'),\n",
              " (0.03354582, 'MZZONE'),\n",
              " (0.00015973639, 'SALE_COND_AbNormal'),\n",
              " (0.014245057, 'SALE_COND_AdjLand'),\n",
              " (0.0010252927, 'SALE_COND_Family'),\n",
              " (0.0002758444, 'SALE_COND_Normal Sale'),\n",
              " (0.005550514, 'SALE_COND_Partial'),\n",
              " (0.4218375, 'BUILDTYPE_Commercial'),\n",
              " (0.018841324, 'BUILDTYPE_House'),\n",
              " (0.0009559948, 'BUILDTYPE_Others')]"
            ]
          },
          "metadata": {},
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**When usig xgboost the r2 value reached 0.9932693005064412 when lr=0.7 and n estimators =100** with cross validation score of 0.9937481722709578"
      ],
      "metadata": {
        "id": "21vRLRNB_v3b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/Cleaned_and_encoded_data.csv\")"
      ],
      "metadata": {
        "id": "ruHkoyNDxjq1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "tSrX6aVb1F7-",
        "outputId": "f8a8cd02-0a96-4da7-849e-b83327943869"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AREA  INT_SQFT  N_BEDROOM  N_BATHROOM  N_ROOM  PARK_FACIL  UTILITY_AVAIL  \\\n",
              "0     0      1004          1           1       3           1              3   \n",
              "1     5      1986          2           1       5           0              3   \n",
              "2     1       909          1           1       3           1              0   \n",
              "3     3      1855          3           2       5           0              2   \n",
              "4     0      1226          1           1       3           1              3   \n",
              "\n",
              "   STREET  MZZONE  SALES_PRICE  SALE_COND_AdjLand  SALE_COND_Family  \\\n",
              "0       1       0      7600000                  0                 0   \n",
              "1       2       3     21717770                  0                 0   \n",
              "2       2       4     13159200                  0                 0   \n",
              "3       1       2      9630290                  0                 1   \n",
              "4       2       1      7406250                  0                 0   \n",
              "\n",
              "   SALE_COND_Normal Sale  SALE_COND_Partial  BUILDTYPE_Commercial  \\\n",
              "0                      0                  0                     1   \n",
              "1                      0                  0                     1   \n",
              "2                      0                  0                     1   \n",
              "3                      0                  0                     0   \n",
              "4                      0                  0                     0   \n",
              "\n",
              "   BUILDTYPE_House  BUILDTYPE_Others  \n",
              "0                0                 0  \n",
              "1                0                 0  \n",
              "2                0                 0  \n",
              "3                0                 1  \n",
              "4                0                 1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e707ebf3-8d5d-4c94-b4af-2a10f4c19ba0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>INT_SQFT</th>\n",
              "      <th>N_BEDROOM</th>\n",
              "      <th>N_BATHROOM</th>\n",
              "      <th>N_ROOM</th>\n",
              "      <th>PARK_FACIL</th>\n",
              "      <th>UTILITY_AVAIL</th>\n",
              "      <th>STREET</th>\n",
              "      <th>MZZONE</th>\n",
              "      <th>SALES_PRICE</th>\n",
              "      <th>SALE_COND_AdjLand</th>\n",
              "      <th>SALE_COND_Family</th>\n",
              "      <th>SALE_COND_Normal Sale</th>\n",
              "      <th>SALE_COND_Partial</th>\n",
              "      <th>BUILDTYPE_Commercial</th>\n",
              "      <th>BUILDTYPE_House</th>\n",
              "      <th>BUILDTYPE_Others</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1004</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7600000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1986</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>21717770</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>909</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>13159200</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1855</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9630290</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1226</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7406250</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e707ebf3-8d5d-4c94-b4af-2a10f4c19ba0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e707ebf3-8d5d-4c94-b4af-2a10f4c19ba0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e707ebf3-8d5d-4c94-b4af-2a10f4c19ba0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop(\"Unnamed: 0\",axis=1)"
      ],
      "metadata": {
        "id": "LSrD_tv31G9r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "eBQmBmSU1QHE",
        "outputId": "4a6fe432-a8b1-45bc-8112-4b8a7047256e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      MZZONE\n",
              "0          0\n",
              "1          3\n",
              "2          4\n",
              "3          2\n",
              "4          1\n",
              "...      ...\n",
              "7051       5\n",
              "7052       3\n",
              "7053       2\n",
              "7054       4\n",
              "7055       2\n",
              "\n",
              "[7056 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-472ccfb5-8d6e-4b3c-9e32-19fffdaad899\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MZZONE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7051</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7052</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7053</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7054</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7055</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7056 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-472ccfb5-8d6e-4b3c-9e32-19fffdaad899')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-472ccfb5-8d6e-4b3c-9e32-19fffdaad899 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-472ccfb5-8d6e-4b3c-9e32-19fffdaad899');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=df.iloc[:,[9]]"
      ],
      "metadata": {
        "id": "pzgNg7_v1RT3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "XNMFdlL81hh2",
        "outputId": "d1808800-4b19-4e1a-cdc0-dd4b3c97dc6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      SALES_PRICE\n",
              "0         7600000\n",
              "1        21717770\n",
              "2        13159200\n",
              "3         9630290\n",
              "4         7406250\n",
              "...           ...\n",
              "7051      5353000\n",
              "7052     10818480\n",
              "7053      8351410\n",
              "7054      8507000\n",
              "7055      9976480\n",
              "\n",
              "[7056 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f32874c-8e94-47d7-b134-fd7bd90610cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SALES_PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21717770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13159200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9630290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7406250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7051</th>\n",
              "      <td>5353000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7052</th>\n",
              "      <td>10818480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7053</th>\n",
              "      <td>8351410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7054</th>\n",
              "      <td>8507000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7055</th>\n",
              "      <td>9976480</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7056 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f32874c-8e94-47d7-b134-fd7bd90610cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6f32874c-8e94-47d7-b134-fd7bd90610cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6f32874c-8e94-47d7-b134-fd7bd90610cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X=df.iloc[:,[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17]]"
      ],
      "metadata": {
        "id": "x81gBRWr1ime"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "K nearest neighbour"
      ],
      "metadata": {
        "id": "6uCNJ2bf-4oR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)"
      ],
      "metadata": {
        "id": "XsFn-dsb1mwZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=X_train\n",
        "x_test=X_test\n"
      ],
      "metadata": {
        "id": "rEqKkFeg5ZwZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_train = pd.DataFrame(x_train_scaled)\n",
        "\n",
        "x_test_scaled = scaler.fit_transform(x_test)\n",
        "x_test = pd.DataFrame(x_test_scaled)"
      ],
      "metadata": {
        "id": "qdHar3mP4auL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import neighbors\n",
        "from sklearn.metrics import mean_squared_error \n",
        "from math import sqrt\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "1nJjUy_f4knA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rmse_val = [] #to store rmse values for different k\n",
        "for K in range(20):\n",
        "    K = K+1\n",
        "    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n",
        "\n",
        "    model.fit(x_train, y_train)  #fit the model\n",
        "    pred=model.predict(x_test) #make prediction on test set\n",
        "    error = sqrt(mean_squared_error(y_test,pred)) #calculate rmse\n",
        "    rmse_val.append(error) #store rmse values\n",
        "    print('RMSE value for k= ' , K , 'is:', error)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pP9rrtc04kzc",
        "outputId": "0a491d23-094d-4975-85bb-bab9c8868379"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE value for k=  1 is: 1358823.8469287818\n",
            "RMSE value for k=  2 is: 1265237.2564087021\n",
            "RMSE value for k=  3 is: 1229700.881812588\n",
            "RMSE value for k=  4 is: 1245214.9694726458\n",
            "RMSE value for k=  5 is: 1248016.298061669\n",
            "RMSE value for k=  6 is: 1271195.327978829\n",
            "RMSE value for k=  7 is: 1294695.8713917364\n",
            "RMSE value for k=  8 is: 1313684.4465503404\n",
            "RMSE value for k=  9 is: 1328544.4284194415\n",
            "RMSE value for k=  10 is: 1353409.256176549\n",
            "RMSE value for k=  11 is: 1366093.7909434568\n",
            "RMSE value for k=  12 is: 1382290.1362770142\n",
            "RMSE value for k=  13 is: 1399209.7935507104\n",
            "RMSE value for k=  14 is: 1414532.9220317272\n",
            "RMSE value for k=  15 is: 1428479.4736906972\n",
            "RMSE value for k=  16 is: 1440720.7823159401\n",
            "RMSE value for k=  17 is: 1449321.4379235469\n",
            "RMSE value for k=  18 is: 1466530.437744486\n",
            "RMSE value for k=  19 is: 1479410.7004765181\n",
            "RMSE value for k=  20 is: 1490423.470409393\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "curve = pd.DataFrame(rmse_val) #elbow curve \n",
        "curve.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "UJaDdB8F55q8",
        "outputId": "577faea8-ded5-4030-871c-6399140fd346"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6715775ed0>"
            ]
          },
          "metadata": {},
          "execution_count": 88
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "metadata": {
        "id": "ILU1ZUwv4k-w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "params = {'n_neighbors':[2,3,4,5,6,7,8,9]}\n",
        "\n",
        "knn = neighbors.KNeighborsRegressor()\n",
        "\n",
        "model = GridSearchCV(knn, params, cv=5)\n",
        "model.fit(x_train,y_train)\n",
        "model.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "svpx8sLi7YFa",
        "outputId": "9324d0fc-f046-492e-cdf2-edf6e7f32b3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'n_neighbors': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3g1Ift9s9oCy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rmse_val = [] #to store rmse values for different k\n",
        "for K in range(20):\n",
        "    K = K+1\n",
        "    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n",
        "\n",
        "    model.fit(x_train, y_train)  #fit the model\n",
        "    pred=model.predict(x_test) #make prediction on test set\n",
        "    error = model.score(x_test, y_test) #calculate rmse\n",
        "    rmse_val.append(error) #store rmse values\n",
        "    print('RMSE value for k= ' , K , 'is:', error)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ttwPySr9n5K",
        "outputId": "2260c2cb-a641-4bec-b712-6f0c8e33bc50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE value for k=  1 is: 0.8666096082223613\n",
            "RMSE value for k=  2 is: 0.8843509228365496\n",
            "RMSE value for k=  3 is: 0.8907560997426825\n",
            "RMSE value for k=  4 is: 0.8879822373893846\n",
            "RMSE value for k=  5 is: 0.887477663414738\n",
            "RMSE value for k=  6 is: 0.8832591626125778\n",
            "RMSE value for k=  7 is: 0.8789028968180862\n",
            "RMSE value for k=  8 is: 0.8753247222839591\n",
            "RMSE value for k=  9 is: 0.8724881951523084\n",
            "RMSE value for k=  10 is: 0.8676705483540487\n",
            "RMSE value for k=  11 is: 0.8651784663959894\n",
            "RMSE value for k=  12 is: 0.8619626395508937\n",
            "RMSE value for k=  13 is: 0.858562718416615\n",
            "RMSE value for k=  14 is: 0.8554479192139259\n",
            "RMSE value for k=  15 is: 0.8525834522281025\n",
            "RMSE value for k=  16 is: 0.8500460639078944\n",
            "RMSE value for k=  17 is: 0.8482503631199514\n",
            "RMSE value for k=  18 is: 0.8446252687534563\n",
            "RMSE value for k=  19 is: 0.8418840290393255\n",
            "RMSE value for k=  20 is: 0.8395212288632663\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in [1,2,3,4,5,6,7,8,9,10,20,50]:\n",
        "  knn = neighbors.KNeighborsRegressor(i) #initialising the model\n",
        "  knn.fit(x_train,y_train) # training the model\n",
        "  print(\"K value  : \" , i, \" cross val score : \", np.mean(cross_val_score(knn, x_train, y_train, cv=10)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4xgb5H1x9nRI",
        "outputId": "eabc7918-91c2-473f-e391-d6f3520e52a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K value  :  1  cross val score :  0.8686272565565794\n",
            "K value  :  2  cross val score :  0.8913425368940798\n",
            "K value  :  3  cross val score :  0.8937329175651338\n",
            "K value  :  4  cross val score :  0.8899257316828466\n",
            "K value  :  5  cross val score :  0.8858133509317021\n",
            "K value  :  6  cross val score :  0.8824875590813969\n",
            "K value  :  7  cross val score :  0.8794719190662909\n",
            "K value  :  8  cross val score :  0.8760887586219741\n",
            "K value  :  9  cross val score :  0.8732421260182051\n",
            "K value  :  10  cross val score :  0.8702557353086858\n",
            "K value  :  20  cross val score :  0.8419070711987491\n",
            "K value  :  50  cross val score :  0.7720249610296537\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "the best value achieved is 'n_neighbors': 3 and the cross val score reached 0.8937329175651338"
      ],
      "metadata": {
        "id": "mmP88rna-9Ug"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision Tree Regressor"
      ],
      "metadata": {
        "id": "WoxJmLCLWScJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)"
      ],
      "metadata": {
        "id": "E8woe7RJVLLw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# Instantiate dt\n",
        "dt = DecisionTreeRegressor()\n",
        "\n",
        "# Fit dt to the training set\n",
        "dt.fit(X_train, y_train)\n",
        "dt.predict(X_test), y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oGQw36JAWl74",
        "outputId": "03382f45-a2ff-4c88-9692-c066c0020d89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 9511000., 13271000.,  8548150., ...,  7203000., 12538550.,\n",
              "        12495925.]),       SALES_PRICE\n",
              " 2657      7910000\n",
              " 3000     13308950\n",
              " 2920      8460450\n",
              " 878       9478500\n",
              " 3092      8558785\n",
              " ...           ...\n",
              " 4719     14554600\n",
              " 1212     10499240\n",
              " 2089      7541750\n",
              " 6595     12878485\n",
              " 4948     12429230\n",
              " \n",
              " [2117 rows x 1 columns])"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Compute y_pred\n",
        "y_pred = dt.predict(X_test)\n",
        "\n",
        "# Compute mse_dt\n",
        "mse_dt = mean_squared_error(y_test, y_pred)\n",
        "rsquared = r2_score(y_test,y_pred)\n",
        "# Compute rmse_dt\n",
        "rmse_dt = mse_dt ** (1/2)\n",
        "\n",
        "# Print rmse_dt\n",
        "print(\"Test set RMSE of dt: {:.2f}\".format(rmse_dt))\n",
        "print(\"Test set R2 of dt: {:.2f}\".format(rsquared))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z1tEe0_zWzy4",
        "outputId": "80bddb06-3b5d-48ef-ea0e-dafa1f702064"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test set RMSE of dt: 639468.78\n",
            "Test set R2 of dt: 0.97\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import make_scorer\n",
        "import numpy as np\n",
        "\n",
        "for depth in range(50,100):\n",
        "  dt = DecisionTreeRegressor(max_depth=depth,random_state=0) # will tell the DT to not grow past the given threhsold\n",
        "  # Fit dt to the training set\n",
        "  dt.fit(X_train, y_train) # the model is trained\n",
        "  trainAccuracy = r2_score(y_train, dt.predict(X_train)) # this is useless information - i am showing to prove a point\n",
        "  dt = DecisionTreeRegressor(max_depth=depth) # a fresh model which is not trained yet\n",
        "  valAccuracy = cross_val_score(dt, X_train, y_train, cv=10, scoring = make_scorer(r2_score)) # syntax : cross_val_Score(freshModel,fts, target, cv= 10/5)\n",
        "  print(depth, trainAccuracy, np.mean(valAccuracy))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LAp-1QpIXLVO",
        "outputId": "8b299df4-8fc8-4142-b3e1-5f065aad1998"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50 0.9999967923236562 0.972105100456741\n",
            "51 0.9999967923236562 0.971554421586476\n",
            "52 0.9999967923236562 0.9721802335933887\n",
            "53 0.9999967923236562 0.9716166663319962\n",
            "54 0.9999967923236562 0.9716338534596021\n",
            "55 0.9999967923236562 0.9713053518300565\n",
            "56 0.9999967923236562 0.971854843214728\n",
            "57 0.9999967923236562 0.9717308358792579\n",
            "58 0.9999967923236562 0.9719229725686729\n",
            "59 0.9999967923236562 0.9711874811529722\n",
            "60 0.9999967923236562 0.9716681005656342\n",
            "61 0.9999967923236562 0.9719531001694726\n",
            "62 0.9999967923236562 0.9716662268033829\n",
            "63 0.9999967923236562 0.9714082428738522\n",
            "64 0.9999967923236562 0.9715442131250122\n",
            "65 0.9999967923236562 0.972089087722311\n",
            "66 0.9999967923236562 0.9713303543276325\n",
            "67 0.9999967923236562 0.971418823290904\n",
            "68 0.9999967923236562 0.971397378333678\n",
            "69 0.9999967923236562 0.9717845444103803\n",
            "70 0.9999967923236562 0.9715943838097267\n",
            "71 0.9999967923236562 0.9716514408985683\n",
            "72 0.9999967923236562 0.9713169467690523\n",
            "73 0.9999967923236562 0.9717964663432639\n",
            "74 0.9999967923236562 0.9715539190071013\n",
            "75 0.9999967923236562 0.9714752849588706\n",
            "76 0.9999967923236562 0.9717024109517676\n",
            "77 0.9999967923236562 0.9717451373510494\n",
            "78 0.9999967923236562 0.9715782006977947\n",
            "79 0.9999967923236562 0.9717477898892156\n",
            "80 0.9999967923236562 0.9713326058389387\n",
            "81 0.9999967923236562 0.9717130310620101\n",
            "82 0.9999967923236562 0.9716540234844698\n",
            "83 0.9999967923236562 0.9715885494462706\n",
            "84 0.9999967923236562 0.9715985949574824\n",
            "85 0.9999967923236562 0.972214741302467\n",
            "86 0.9999967923236562 0.9717144018304074\n",
            "87 0.9999967923236562 0.9717474973614438\n",
            "88 0.9999967923236562 0.9717267872247131\n",
            "89 0.9999967923236562 0.9713890334561566\n",
            "90 0.9999967923236562 0.9719543527667852\n",
            "91 0.9999967923236562 0.9711694462053645\n",
            "92 0.9999967923236562 0.9718257611329874\n",
            "93 0.9999967923236562 0.9716178215685091\n",
            "94 0.9999967923236562 0.9714163635270932\n",
            "95 0.9999967923236562 0.9717200353724296\n",
            "96 0.9999967923236562 0.9712907362131811\n",
            "97 0.9999967923236562 0.9711154239171973\n",
            "98 0.9999967923236562 0.9713578562723952\n",
            "99 0.9999967923236562 0.9713987536137081\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "depth=85 cross val score reached is 0.972214741302467\n"
      ],
      "metadata": {
        "id": "5VC0-wJOXinn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "pi78k0PsX2lc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot\n",
        "dt = DecisionTreeRegressor(max_depth = 64)\n",
        "# Fit dt to the training set\n",
        "dt.fit(X_train, y_train)\n",
        "importance = dt.feature_importances_\n",
        "pyplot.bar([x for x in range(len(importance))], importance)\n",
        "list(zip(importance,X_test.columns))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "SryEOybGXcTI",
        "outputId": "2f7e1cd9-04a2-45ef-9a37-f177356b38ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(0.4833959454350564, 'AREA'),\n",
              " (0.11349509072855037, 'INT_SQFT'),\n",
              " (0.00026856936048449406, 'N_BEDROOM'),\n",
              " (0.000597341594959677, 'N_BATHROOM'),\n",
              " (0.0001108301146391524, 'N_ROOM'),\n",
              " (0.015475058173423956, 'PARK_FACIL'),\n",
              " (0.0018730278101325528, 'UTILITY_AVAIL'),\n",
              " (0.01232749754628707, 'STREET'),\n",
              " (0.039032583186510164, 'MZZONE'),\n",
              " (0.0004193664420836722, 'SALE_COND_AbNormal'),\n",
              " (0.0014651836962292163, 'SALE_COND_AdjLand'),\n",
              " (0.0005222584866428402, 'SALE_COND_Family'),\n",
              " (0.0004881449786751346, 'SALE_COND_Normal Sale'),\n",
              " (0.0008087215173467513, 'SALE_COND_Partial'),\n",
              " (0.3245118341093932, 'BUILDTYPE_Commercial'),\n",
              " (0.003134805998469154, 'BUILDTYPE_House'),\n",
              " (0.0020737408211159037, 'BUILDTYPE_Others')]"
            ]
          },
          "metadata": {},
          "execution_count": 97
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD5CAYAAAA3Os7hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAO+UlEQVR4nO3df6xfd13H8eeLlmoCCwx7g3Mt3IENSVWEeS1oCBJB7JhpMUDSxR+bYBoijRA02gSzkPrPxiJGpVHqWIIELDBFr66kTMQY/9js3RyDbo7dNcW1Gaz8yKYhMCpv//iei1++/d57T9tv748Pz0fyzT3nfD7n+333fE9e99zP+dFUFZKk9e9pq12AJGkyDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEZs7NMpyU7gT4ANwK1VddNI+w3ALcDpbtH7qurWpd5z8+bNNT09fb71StL3tXvuuecrVTU1rm3ZQE+yATgI/AJwCjiWZLaqHhjp+tGq2te3qOnpaebm5vp2lyQBSb64WFufIZcdwHxVnaiqp4DDwO5JFSdJmow+gX4l8OjQ/Klu2ag3JLk/ye1Jtk6kOklSb5M6KfoPwHRVvRi4E/jguE5J9iaZSzJ35syZCX20JAn6BfppYPiIewv/f/ITgKr6alV9q5u9FfipcW9UVYeqaqaqZqamxo7pS5IuUJ9APwZsS3JVkk3AHmB2uEOSK4ZmdwEPTq5ESVIfy17lUlVnk+wDjjK4bPG2qjqe5AAwV1WzwG8n2QWcBb4G3HAJa5YkjZHVenzuzMxMedmiJJ2fJPdU1cy4Nu8UlaRGGOiS1Ihet/6vNdP777jgdU/edO0EK5GktcMjdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGtEr0JPsTPJQkvkk+5fo94YklWRmciVKkvpYNtCTbAAOAtcA24Hrkmwf0+8y4O3A3ZMuUpK0vD5H6DuA+ao6UVVPAYeB3WP6/SFwM/DNCdYnSeqpT6BfCTw6NH+qW/ZdSa4GtlbVHUu9UZK9SeaSzJ05c+a8i5UkLe6iT4omeRrwXuB3lutbVYeqaqaqZqampi72oyVJQ/oE+mlg69D8lm7ZgsuAHwf+JclJ4OXArCdGJWll9Qn0Y8C2JFcl2QTsAWYXGqvqiaraXFXTVTUN3AXsqqq5S1KxJGmsZQO9qs4C+4CjwIPAx6rqeJIDSXZd6gIlSf1s7NOpqo4AR0aW3bhI31ddfFmSpPPlnaKS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiM2rnYBktTH9P47Lmi9kzddO+FK1i6P0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjegV6kp1JHkoyn2T/mPa3JvlckvuS/FuS7ZMvVZK0lGUDPckG4CBwDbAduG5MYH+kqn6iql4CvAd478QrlSQtqc8R+g5gvqpOVNVTwGFg93CHqnpyaPYZQE2uRElSH33uFL0SeHRo/hTwstFOSd4GvBPYBPz8uDdKshfYC/C85z3vfGuVJC1hYidFq+pgVb0Q+H3gDxbpc6iqZqpqZmpqalIfLUmiX6CfBrYOzW/pli3mMPD6iylKknT++gT6MWBbkquSbAL2ALPDHZJsG5q9Fnh4ciVKkvpYdgy9qs4m2QccBTYAt1XV8SQHgLmqmgX2JXkN8G3g68D1l7JoSdK5ej0+t6qOAEdGlt04NP32CdclSTpP3ikqSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqRG9Aj3JziQPJZlPsn9M+zuTPJDk/iSfTvL8yZcqSVrKsoGeZANwELgG2A5cl2T7SLf/AGaq6sXA7cB7Jl2oJGlpfY7QdwDzVXWiqp4CDgO7hztU1Weq6hvd7F3AlsmWKUlaTp9AvxJ4dGj+VLdsMW8BPjmuIcneJHNJ5s6cOdO/SknSsiZ6UjTJrwIzwC3j2qvqUFXNVNXM1NTUJD9akr7vbezR5zSwdWh+S7fseyR5DfAu4Oeq6luTKU+S1FefI/RjwLYkVyXZBOwBZoc7JHkp8H5gV1U9PvkyJUnLWTbQq+ossA84CjwIfKyqjic5kGRX1+0W4JnAx5Pcl2R2kbeTJF0ifYZcqKojwJGRZTcOTb9mwnVJks6Td4pKUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktSIjatdwGqa3n/HBa978qZrJ1iJJF08j9AlqREGuiQ1olegJ9mZ5KEk80n2j2l/ZZJ7k5xN8sbJlylJWs6ygZ5kA3AQuAbYDlyXZPtIt/8CbgA+MukCJUn99DkpugOYr6oTAEkOA7uBBxY6VNXJru07l6BGSVIPfYZcrgQeHZo/1S07b0n2JplLMnfmzJkLeQtJ0iJW9KRoVR2qqpmqmpmamlrJj5ak5vUJ9NPA1qH5Ld0ySdIa0ifQjwHbklyVZBOwB5i9tGVJks7XsoFeVWeBfcBR4EHgY1V1PMmBJLsAkvx0klPAm4D3Jzl+KYuWJJ2r163/VXUEODKy7Mah6WMMhmIkSavEO0UlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktSIXv9JtNSa6f13XPC6J2+6doKVSJPjEbokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCO0W1pAu9o9K7KaWV5xG6JDXCI3StKz6DRVpcryP0JDuTPJRkPsn+Me0/kOSjXfvdSaYnXagkaWnLBnqSDcBB4BpgO3Bdku0j3d4CfL2qfhT4Y+DmSRcqSVpanyGXHcB8VZ0ASHIY2A08MNRnN/Dubvp24H1JUlU1wVol6aK1PGzXJ9CvBB4dmj8FvGyxPlV1NskTwA8BX5lEkVr/vFpmaS2HTKvf/Vr8zrLcQXSSNwI7q+o3u/lfA15WVfuG+ny+63Oqm3+k6/OVkffaC+ztZl8EPDSpf8iIzay/XybWvDLWY82wPuu25kvj+VU1Na6hzxH6aWDr0PyWbtm4PqeSbASeBXx19I2q6hBwqE/FFyPJXFXNXOrPmSRrXhnrsWZYn3Vb88rrc5XLMWBbkquSbAL2ALMjfWaB67vpNwL/7Pi5JK2sZY/QuzHxfcBRYANwW1UdT3IAmKuqWeADwIeSzANfYxD6kqQV1OvGoqo6AhwZWXbj0PQ3gTdNtrSLcsmHdS4Ba14Z67FmWJ91W/MKW/akqCRpffBZLpLUiHUb6OvxcQRJtib5TJIHkhxP8vYxfV6V5Ikk93WvG8e910pKcjLJ57p65sa0J8mfdtv6/iRXr0adQ/W8aGj73ZfkySTvGOmzJrZzktuSPN5d+ruw7DlJ7kzycPfz8kXWvb7r83CS68f1WcGab0nyn933/4kkz15k3SX3pRWu+d1JTg/tA69bZN0ls2ZNqap192JwcvYR4AXAJuCzwPaRPr8F/EU3vQf46Bqo+wrg6m76MuALY+p+FfCPq13rSE0ngc1LtL8O+CQQ4OXA3atd88i+8iUG1+6uue0MvBK4Gvj80LL3APu76f3AzWPWew5wovt5eTd9+SrW/FpgYzd987ia++xLK1zzu4Hf7bH/LJk1a+m1Xo/Qv/s4gqp6Clh4HMGw3cAHu+nbgVcnyQrWeI6qeqyq7u2m/xt4kMFdtuvdbuCvauAu4NlJrljtojqvBh6pqi+udiHjVNW/MrgybNjwvvtB4PVjVv1F4M6q+lpVfR24E9h5yQodMq7mqvpUVZ3tZu9icL/KmrHIdu6jT9asGes10Mc9jmA0GL/ncQTAwuMI1oRuCOilwN1jmn8myWeTfDLJj61oYeMV8Kkk93R3+47q832slj3AXy/Stta284LnVtVj3fSXgOeO6bOWt/mbGfzFNs5y+9JK29cNE922yNDWWt7O51ivgb6uJXkm8DfAO6rqyZHmexkMD/wk8GfA3610fWO8oqquZvDEzbcleeVqF9RHdyPcLuDjY5rX4nY+Rw3+7l83l6IleRdwFvjwIl3W0r7058ALgZcAjwF/tIq1TMR6DfTzeRwBSz2OYKUleTqDMP9wVf3taHtVPVlV/9NNHwGenmTzCpc5WtPp7ufjwCcY/Bk6rM/3sRquAe6tqi+PNqzF7TzkywtDVt3Px8f0WXPbPMkNwC8Bv9L9IjpHj31pxVTVl6vqf6vqO8BfLlLLmtvOS1mvgb4uH0fQjeF/AHiwqt67SJ8fXhjrT7KDwXe0ar+IkjwjyWUL0wxOfn1+pNss8Ovd1S4vB54YGjJYTdexyHDLWtvOI4b33euBvx/T5yjw2iSXd0MFr+2WrYokO4HfA3ZV1TcW6dNnX1oxI+d5fnmRWvpkzdqx2mdlL/TF4MqKLzA4A/2ubtkBBjsUwA8y+FN7Hvh34AVroOZXMPjz+X7gvu71OuCtwFu7PvuA4wzOpt8F/Owq1/yCrpbPdnUtbOvhmsPgP0F5BPgcMLMGtvUzGAT0s4aWrbntzOAXzmPAtxmMz76FwbmeTwMPA/8EPKfrOwPcOrTum7v9ex74jVWueZ7BWPPCfr1whdmPAEeW2pdWseYPdfvr/QxC+orRmrv5c7Jmrb68U1SSGrFeh1wkSSMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGvF/kyPks57zNdIAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "tkrjtlOqZ6Su"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest Regressor\n"
      ],
      "metadata": {
        "id": "jg2p8NpIe4Sl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "kqcvzBxYe63O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf = RandomForestRegressor(n_estimators= 100, max_depth = 18, max_features='sqrt')"
      ],
      "metadata": {
        "id": "UflMgp2RfX7s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BPyWfWqtfaz7",
        "outputId": "b604da46-5697-4d17-bef0-4b2c3a930103"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_depth=18, max_features='sqrt')"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = rf.predict(X_test)"
      ],
      "metadata": {
        "id": "sDUrmfD6ffqq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(predictions, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z60SMmqQfllX",
        "outputId": "903a5f4e-b9f2-44d5-8508-5cd98a9fc280"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9831575035396435"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import tree"
      ],
      "metadata": {
        "id": "ipzzT3dXfrgr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "original_feature_list=X.columns"
      ],
      "metadata": {
        "id": "i_-o4ALggPhd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_graphviz\n",
        "import pydot\n",
        "\n",
        "# Pull out one tree from the forest\n",
        "tree = rf.estimators_[5]\n",
        "\n",
        "# Export the image to a dot file\n",
        "export_graphviz(tree, out_file = 'tree.dot', feature_names = original_feature_list, rounded = True, precision = 1)\n",
        "\n",
        "# Use dot file to create a graph\n",
        "(graph, ) = pydot.graph_from_dot_file('tree.dot')\n",
        "\n",
        "# Write graph to a png file\n",
        "graph.write_png('tree.png');"
      ],
      "metadata": {
        "id": "xfptjSMGgAGH"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}